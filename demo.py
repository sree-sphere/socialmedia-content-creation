"""
Demo script for Context Creation App with Agentic AI
This script demonstrates the core functionality without requiring a full Streamlit environment.
"""

import sys
import json
from pathlib import Path

# Add the project directory to the path
sys.path.append('.')

from code.agentic_content_router import ContentRouter, SmartPromptBuilder
from code.huggingface_models import HuggingFaceModelManager, TextGenerator, ImageGenerator, VideoGenerator

def print_header(title):
    """Print a formatted header."""
    print("\n" + "="*60)
    print(f"  {title}")
    print("="*60)

def print_section(title):
    """Print a formatted section header."""
    print(f"\n--- {title} ---")

def demo_content_routing():
    """Demonstrate the content routing functionality."""
    print_header("🎯 AGENTIC CONTENT ROUTING DEMO")
    
    # Initialize the router
    router = ContentRouter()
    prompt_builder = SmartPromptBuilder()
    
    print("Initializing Content Router...")
    print("✅ Router initialized successfully!")
    
    # Sample content plan (like what would be generated by the LLM)
    sample_plan = {
        "client_type": "chef",
        "duration": "1 month",
        "days": [
            {
                "day": 1,
                "content_idea": "Welcome post introducing our restaurant",
                "infographic_description": "A beautiful infographic showing our signature dishes with elegant food photography styling",
                "hashtags": "#chef #restaurant #foodie #welcome",
                "post_caption": "Welcome to our culinary journey! Excited to share our passion for food with you."
            },
            {
                "day": 2,
                "content_idea": "Behind-the-scenes kitchen tour",
                "video_script": "Create a 60-second video tour of our professional kitchen showing the cooking process",
                "hashtags": "#behindthescenes #kitchen #cooking #chef",
                "post_caption": "Take a peek behind the scenes at our busy kitchen!"
            },
            {
                "day": 3,
                "content_idea": "Recipe sharing - signature pasta dish",
                "infographic_description": "Step-by-step recipe infographic for our famous carbonara with ingredient photos",
                "photo_description": "High-quality photo of the finished pasta dish with professional food styling",
                "hashtags": "#recipe #pasta #carbonara #homecooking",
                "post_caption": "Our secret carbonara recipe - now you can make it at home!"
            }
        ]
    }
    
    # Convert to JSON string (simulating LLM output)
    content_plan_json = json.dumps(sample_plan, indent=2)
    
    print_section("📋 Generated Content Plan")
    print(content_plan_json)
    
    # Route the content
    print_section("🤖 Agentic Routing Analysis")
    routed_content = router.analyze_content_plan(content_plan_json)
    
    # Display routing results
    print(router.get_routing_summary(routed_content))
    
    print_section("📝 Text Content Items")
    for i, item in enumerate(routed_content['text_generation']):
        print(f"{i+1}. Day {item['day']} - {item['type']}: {item['content'][:80]}...")
    
    print_section("🖼️ Image Generation Tasks")
    for i, item in enumerate(routed_content['image_generation']):
        print(f"{i+1}. Day {item['day']} - {item['type']}")
        prompt = prompt_builder.build_image_prompt(item, "chef")
        print(f"   Optimized Prompt: {prompt}")
    
    print_section("🎥 Video Generation Tasks")
    for i, item in enumerate(routed_content['video_generation']):
        print(f"{i+1}. Day {item['day']} - {item['type']}")
        prompt = prompt_builder.build_video_prompt(item, "chef")
        print(f"   Optimized Prompt: {prompt}")
    
    return routed_content

def demo_model_manager():
    """Demonstrate the model manager functionality."""
    print_header("🤖 HUGGING FACE MODEL MANAGER DEMO")
    
    # Initialize model manager
    print("Initializing Model Manager...")
    model_manager = HuggingFaceModelManager()
    print("✅ Model Manager initialized!")
    
    print_section("🧪 Testing Model Availability")
    
    # Test each model type
    text_available = model_manager.test_model_availability('text')
    image_available = model_manager.test_model_availability('image')
    video_available = model_manager.test_model_availability('video')
    
    print(f"Text Generation: {'✅ Available' if text_available else '❌ Unavailable'}")
    print(f"Image Generation: {'✅ Available' if image_available else '❌ Unavailable'}")
    print(f"Video Generation: {'✅ Available' if video_available else '❌ Unavailable'}")
    
    print_section("📊 Model Configuration")
    for model_type, config in model_manager.models.items():
        print(f"{model_type.title()} Models:")
        print(f"  Primary: {config['primary']}")
        print(f"  Fallback: {config['fallback']}")
        print(f"  Alternatives: {', '.join(config['alternatives'][:2])}...")
    
    return model_manager

def demo_content_generation(model_manager):
    """Demonstrate content generation."""
    print_header("🎨 CONTENT GENERATION DEMO")
    
    # Test text generation
    print_section("📝 Text Generation Test")
    text_gen = TextGenerator(model_manager)
    
    try:
        print("Generating content plan for 'fitness trainer'...")
        content_plan = text_gen.generate_content_plan("fitness trainer", "1 week")
        
        # Parse and display nicely
        try:
            parsed_plan = json.loads(content_plan)
            print("✅ Content plan generated successfully!")
            print(f"Client Type: {parsed_plan.get('client_type', 'N/A')}")
            print(f"Duration: {parsed_plan.get('duration', 'N/A')}")
            print(f"Days Generated: {len(parsed_plan.get('days', []))}")
            
            # Show first day as example
            if parsed_plan.get('days'):
                first_day = parsed_plan['days'][0]
                print(f"\nExample (Day 1):")
                print(f"  Content Idea: {first_day.get('content_idea', 'N/A')}")
                print(f"  Hashtags: {first_day.get('hashtags', 'N/A')}")
                
        except json.JSONDecodeError:
            print("⚠️ Generated content is not valid JSON, but generation worked.")
            print(f"Content preview: {content_plan[:200]}...")
            
    except Exception as e:
        print(f"❌ Text generation failed: {e}")
    
    # Test image generation
    print_section("🖼️ Image Generation Test")
    image_gen = ImageGenerator(model_manager)
    
    try:
        print("Testing image generation...")
        prompt = "A professional fitness trainer demonstrating proper form for squats in a modern gym"
        result = image_gen.generate_image(prompt)
        print(f"✅ Image generation test completed: {type(result)}")
        
    except Exception as e:
        print(f"❌ Image generation failed: {e}")
    
    # Test video generation
    print_section("🎥 Video Generation Test")
    video_gen = VideoGenerator(model_manager)
    
    try:
        print("Testing video generation...")
        prompt = "A fitness trainer showing a 30-second workout routine"
        result = video_gen.generate_video(prompt)
        print(f"✅ Video generation test completed: {result}")
        
    except Exception as e:
        print(f"❌ Video generation failed: {e}")

def demo_full_workflow():
    """Demonstrate the complete workflow."""
    print_header("🔄 COMPLETE WORKFLOW DEMO")
    
    print("This demo shows how a user request flows through the entire system:")
    print("1. User inputs client type")
    print("2. LLM generates content plan")
    print("3. Agentic router analyzes and routes content")
    print("4. Specialized models generate multimedia content")
    
    # Step 1: User input
    print_section("👤 Step 1: User Input")
    client_type = "digital marketing agency"
    duration = "2 weeks"
    print(f"Client Type: {client_type}")
    print(f"Duration: {duration}")
    
    # Step 2: Content plan generation
    print_section("🧠 Step 2: Content Plan Generation")
    model_manager = HuggingFaceModelManager()
    text_gen = TextGenerator(model_manager)
    
    try:
        content_plan = text_gen.generate_content_plan(client_type, duration)
        print("✅ Content plan generated!")
    except Exception as e:
        print(f"⚠️ Using fallback content plan: {e}")
        # Use a simple demo plan
        content_plan = json.dumps({
            "client_type": client_type,
            "duration": duration,
            "days": [
                {
                    "day": 1,
                    "content_idea": "Digital marketing trends infographic",
                    "infographic_description": "Modern infographic showing 2024 digital marketing trends with charts and statistics",
                    "hashtags": "#digitalmarketing #trends #2024 #marketing",
                    "post_caption": "Stay ahead with these digital marketing trends!"
                }
            ]
        })
    
    # Step 3: Content routing
    print_section("🎯 Step 3: Agentic Content Routing")
    router = ContentRouter()
    routed_content = router.analyze_content_plan(content_plan)
    print(router.get_routing_summary(routed_content))
    
    # Step 4: Content generation
    print_section("🎨 Step 4: Multimedia Generation")
    prompt_builder = SmartPromptBuilder()
    
    # Generate optimized prompts for each content type
    if routed_content['image_generation']:
        for item in routed_content['image_generation']:
            prompt = prompt_builder.build_image_prompt(item, client_type)
            print(f"📸 Image Prompt: {prompt}")
    
    if routed_content['video_generation']:
        for item in routed_content['video_generation']:
            prompt = prompt_builder.build_video_prompt(item, client_type)
            print(f"🎬 Video Prompt: {prompt}")
    
    print("\n✅ Complete workflow demonstration finished!")

def main():
    """Main demo function."""
    print_header("🎨 CONTEXT CREATION APP - COMPREHENSIVE DEMO")
    print("This demo showcases the complete agentic AI system for content creation.")
    print("The app generates content plans and routes them to appropriate AI models.")
    
    try:
        # Demo 1: Content routing
        routed_content = demo_content_routing()
        
        # Demo 2: Model manager
        model_manager = demo_model_manager()
        
        # Demo 3: Content generation
        demo_content_generation(model_manager)
        
        # Demo 4: Full workflow
        demo_full_workflow()
        
        print_header("🎉 DEMO COMPLETED SUCCESSFULLY!")
        print("The Context Creation App is ready for use!")
        print("\nNext steps:")
        print("1. Run 'streamlit run code/streamlit_app.py' to start the web interface")
        print("2. Add your Hugging Face token for full model access")
        print("3. Try generating content for different client types")
        
    except Exception as e:
        print(f"\n❌ Demo failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
